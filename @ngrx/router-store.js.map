{"version":3,"file":"router-store.js","sources":["../../../modules/router-store/index.ts","../../../modules/router-store/src/router_store_module.ts","../../../modules/router-store/src/serializer.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ROUTER_ERROR,ROUTER_CANCEL,ROUTER_NAVIGATION,RouterNavigationAction,RouterCancelAction,RouterErrorAction,RouterAction,routerReducer,RouterErrorPayload,RouterReducerState,RouterCancelPayload,RouterNavigationPayload,StoreRouterConnectingModule,RouterStateSerializer,DefaultRouterStateSerializer} from './public_api';\n","import { NgModule } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationError,\n  Router,\n  RouterStateSnapshot,\n  RoutesRecognized,\n} from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs/observable/of';\nimport {\n  DefaultRouterStateSerializer,\n  RouterStateSerializer,\n} from './serializer';\n/**\n * An action dispatched when the router navigates.\n */\nexport const ROUTER_NAVIGATION = 'ROUTER_NAVIGATION';\n\n/**\n * Payload of ROUTER_NAVIGATION.\n */\nexport type RouterNavigationPayload<T> = {\n  routerState: T;\n  event: RoutesRecognized;\n};\n\n/**\n * An action dispatched when the router navigates.\n */\nexport type RouterNavigationAction<T> = {\n  type: typeof ROUTER_NAVIGATION;\n  payload: RouterNavigationPayload<T>;\n};\n/**\n * An action dispatched when the router cancels navigation.\n */\nexport const ROUTER_CANCEL = 'ROUTER_CANCEL';\n\n/**\n * Payload of ROUTER_CANCEL.\n */\nexport type RouterCancelPayload<T> = {\n  routerState: RouterStateSnapshot;\n  storeState: T;\n  event: NavigationCancel;\n};\n\n/**\n * An action dispatched when the router cancel navigation.\n */\nexport type RouterCancelAction<T> = {\n  type: typeof ROUTER_CANCEL;\n  payload: RouterCancelPayload<T>;\n};\n/**\n * An action dispatched when the router errors.\n */\nexport const ROUTER_ERROR = 'ROUTE_ERROR';\n\n/**\n * Payload of ROUTER_ERROR.\n */\nexport type RouterErrorPayload<T> = {\n  routerState: RouterStateSnapshot;\n  storeState: T;\n  event: NavigationError;\n};\n\n/**\n * An action dispatched when the router errors.\n */\nexport type RouterErrorAction<T> = {\n  type: typeof ROUTER_ERROR;\n  payload: RouterErrorPayload<T>;\n};\n\n/**\n * An union type of router actions.\n */\nexport type RouterAction<T> =\n  | RouterNavigationAction<T>\n  | RouterCancelAction<T>\n  | RouterErrorAction<T>;\n\nexport type RouterReducerState = {\n  state: RouterStateSnapshot;\n  navigationId: number;\n};\n/**\n * @param {?} state\n * @param {?} action\n * @return {?}\n */\nexport function routerReducer(\n  state: RouterReducerState,\n  action: RouterAction<any>\n): RouterReducerState {\n  switch (action.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    default:\n      return state;\n  }\n}\n/**\n * Connects RouterModule with StoreModule.\n * \n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n * \n * ```\n * export type RouterNavigationPayload = {\n *   routerState: RouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n * \n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n * \n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n * \n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n * \n * Usage:\n * \n * ```typescript\n * \\@NgModule({ \n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nexport class StoreRouterConnectingModule {\nprivate routerState: RouterStateSnapshot;\nprivate storeState: any;\nprivate lastRoutesRecognized: RoutesRecognized;\nprivate dispatchTriggeredByRouter: boolean = false;\nprivate navigationTriggeredByDispatch: boolean = false;\n/**\n * @param {?} store\n * @param {?} router\n * @param {?} serializer\n */\nconstructor(\nprivate store: Store<any>,\nprivate router: Router,\nprivate serializer: RouterStateSerializer<RouterStateSnapshot>\n  ) {\n    this.setUpBeforePreactivationHook();\n    this.setUpStoreStateListener();\n    this.setUpStateRollbackEvents();\n  }\n/**\n * @return {?}\n */\nprivate setUpBeforePreactivationHook(): void {\n    ( /** @type {?} */((<any>this.router))).hooks.beforePreactivation = (\n      routerState: RouterStateSnapshot\n    ) => {\n      this.routerState = this.serializer.serialize(routerState);\n      if (this.shouldDispatchRouterNavigation())\n        this.dispatchRouterNavigation();\n      return of(true);\n    };\n  }\n/**\n * @return {?}\n */\nprivate setUpStoreStateListener(): void {\n    this.store.subscribe(s => {\n      this.storeState = s;\n      this.navigateIfNeeded();\n    });\n  }\n/**\n * @return {?}\n */\nprivate shouldDispatchRouterNavigation(): boolean {\n    if (!this.storeState['routerReducer']) return true;\n    return !this.navigationTriggeredByDispatch;\n  }\n/**\n * @return {?}\n */\nprivate navigateIfNeeded(): void {\n    if (\n      !this.storeState['routerReducer'] ||\n      !this.storeState['routerReducer'].state\n    ) {\n      return;\n    }\n    if (this.dispatchTriggeredByRouter) return;\n\n    if (this.router.url !== this.storeState['routerReducer'].state.url) {\n      this.navigationTriggeredByDispatch = true;\n      this.router.navigateByUrl(this.storeState['routerReducer'].state.url);\n    }\n  }\n/**\n * @return {?}\n */\nprivate setUpStateRollbackEvents(): void {\n    this.router.events.subscribe(e => {\n      if (e instanceof RoutesRecognized) {\n        this.lastRoutesRecognized = e;\n      } else if (e instanceof NavigationCancel) {\n        this.dispatchRouterCancel(e);\n      } else if (e instanceof NavigationError) {\n        this.dispatchRouterError(e);\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate dispatchRouterNavigation(): void {\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: this.routerState,\n      event: /** @type {?} */(( {\n        id: this.lastRoutesRecognized.id,\n        url: this.lastRoutesRecognized.url,\n        urlAfterRedirects: this.lastRoutesRecognized.urlAfterRedirects,\n        state: this.serializer.serialize(this.routerState),\n      } as RoutesRecognized)),\n    });\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nprivate dispatchRouterCancel(event: NavigationCancel): void {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      routerState: this.routerState,\n      storeState: this.storeState,\n      event,\n    });\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nprivate dispatchRouterError(event: NavigationError): void {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      routerState: this.routerState,\n      storeState: this.storeState,\n      event,\n    });\n  }\n/**\n * @param {?} type\n * @param {?} payload\n * @return {?}\n */\nprivate dispatchRouterAction(type: string, payload: any): void {\n    this.dispatchTriggeredByRouter = true;\n    try {\n      this.store.dispatch({ type, payload });\n    } finally {\n      this.dispatchTriggeredByRouter = false;\n      this.navigationTriggeredByDispatch = false;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    { provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer },\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Store, },\n{type: Router, },\n{type: RouterStateSerializer, },\n];\n}\n\nfunction StoreRouterConnectingModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreRouterConnectingModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreRouterConnectingModule.ctorParameters;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.routerState;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.storeState;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.lastRoutesRecognized;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.dispatchTriggeredByRouter;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.navigationTriggeredByDispatch;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.store;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.router;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.serializer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { InjectionToken } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\n/**\n * @abstract\n */\nexport abstract class RouterStateSerializer<T> {\n/**\n * @abstract\n * @param {?} routerState\n * @return {?}\n */\nserialize(routerState: RouterStateSnapshot) {}\n}\nexport class DefaultRouterStateSerializer\n  implements RouterStateSerializer<RouterStateSnapshot> {\n/**\n * @param {?} routerState\n * @return {?}\n */\nserialize(routerState: RouterStateSnapshot) {\n    return routerState;\n  }\n}\n"],"names":[],"mappings":";;;;;AEEA;;;AAGA,AAAA,MAAA,qBAAA,CAAA;;;;;;IAMA,SAPY,CAAA,WAAA,EAOZ,GAPY;CAQX;AACD,AAAA,MAAA,4BAAA,CAAA;;;;;IAMA,SAVG,CAAA,WAAA,EAUH;QACI,OAVO,WAAA,CAAY;KAWpB;CACF;;ADRD;;;AAGA,AAAC,MAAA,iBAAA,GAAA,mBAAA,CAAA;;;;AAoBD,AACC,MAAA,aAAA,GAAA,eAAA,CAAA;;;;AAoBD,AAEC,MAAA,YAAA,GAAA,aAAA,CAAA;;;;;;AAkCD,AAAA,SAAA,aAAA,CACE,KAAsB,EACtB,MAAuB,EAFzB;IAIE,QAAO,MAFE,CAAM,IAAC;QAGd,KAFK,iBAAA,CAAkB;QAGvB,KAFK,YAAA,CAAa;QAGlB,KAFK,aAAA;YAGH,OAFO;gBAGL,KAAC,EAFM,MAAA,CAAO,OAAC,CAAO,WAAC;gBAGvB,YAAK,EAFS,MAAA,CAAO,OAAC,CAAO,KAAC,CAAK,EAAC;aAGrC,CAFC;QAGJ;YACE,OAFO,KAAA,CAAM;KAGhB;CACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CD,AAAA,MAAA,2BAAA,CAAA;;;;;;IAWA,WAAA,CAFY,KAAiB,EACjB,MAAQ,EACR,UAAsD,EAAlE;QAFY,IAAZ,CAAA,KAAY,GAAA,KAAA,CAAiB;QACjB,IAAZ,CAAA,MAAY,GAAA,MAAA,CAAQ;QACR,IAAZ,CAAA,UAAY,GAAA,UAAA,CAAsD;QANxD,IAAV,CAAA,yBAAU,GAAqC,KAAA,CAAM;QAC3C,IAAV,CAAA,6BAAU,GAAyC,KAAA,CAAM;QAUrD,IAAI,CAAC,4BAA4B,EAAE,CAAC;QACpC,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,wBAAwB,EAAE,CAAC;KACjC;;;;IADA,4BAAA,GAAH;QAMI,EALM,IAAC,CAAI,MAAC,GAAO,KAAC,CAAK,mBAAC,GAAqB,CAM7C,WALa,KAInB;YAGM,IAAI,CALC,WAAC,GAAa,IAAA,CAAK,UAAC,CAAU,SAAC,CAAS,WAAC,CAAW,CAAC;YAM1D,IAAI,IALC,CAAI,8BAAC,EAA8B;gBAMtC,IAAI,CALC,wBAAC,EAAwB,CAAE;YAMlC,OALO,EAAA,CAAG,IAAC,CAAI,CAAC;SAMjB,CALC;KAMH;;;;IAHA,uBAAA,GAAH;QAQI,IAAI,CAPC,KAAC,CAAK,SAAC,CAAS,CAAC,IAO1B;YACM,IAAI,CAPC,UAAC,GAAY,CAAA,CAAE;YAQpB,IAAI,CAPC,gBAAC,EAAgB,CAAE;SAQzB,CAPC,CAAC;KAQJ;;;;IALA,8BAAA,GAAH;QAUI,IAAI,CATC,IAAC,CAAI,UAAC,CAAU,eAAC,CAAe;YAAE,OAAO,IAAA,CAAK;QAUnD,OATO,CAAA,IAAE,CAAI,6BAAC,CAA6B;KAU5C;;;;IAPA,gBAAA,GAAH;QAYI,IACE,CAAC,IAXC,CAAI,UAAC,CAAU,eAAC,CAAe;YAYjC,CAAC,IAXC,CAAI,UAAC,CAAU,eAAC,CAAe,CAAC,KAYpC,EAXE;YAYA,OAAO;SACR;QACD,IAAI,IAXC,CAAI,yBAAC;YAA0B,OAAA;QAapC,IAAI,IAXC,CAAI,MAAC,CAAM,GAAC,KAAO,IAAA,CAAK,UAAC,CAAU,eAAC,CAAe,CAAC,KAAC,CAAK,GAAC,EAAI;YAYlE,IAAI,CAXC,6BAAC,GAA+B,IAAA,CAAK;YAY1C,IAAI,CAXC,MAAC,CAAM,aAAC,CAAa,IAAC,CAAI,UAAC,CAAU,eAAC,CAAe,CAAC,KAAC,CAAK,GAAC,CAAG,CAAC;SAYvE;KACF;;;;IATA,wBAAA,GAAH;QAcI,IAAI,CAbC,MAAC,CAAM,MAAC,CAAM,SAAC,CAAS,CAAC,IAalC;YACM,IAAI,CAbC,YAAY,gBAAA,EAAkB;gBAcjC,IAAI,CAbC,oBAAC,GAAsB,CAAA,CAAE;aAc/B;iBAbM,IAAA,CAAK,YAAY,gBAAA,EAAkB;gBAcxC,IAAI,CAbC,oBAAC,CAAoB,CAAC,CAAC,CAAC;aAc9B;iBAbM,IAAA,CAAK,YAAY,eAAA,EAAiB;gBAcvC,IAAI,CAbC,mBAAC,CAAmB,CAAC,CAAC,CAAC;aAc7B;SACF,CAbC,CAAC;KAcJ;;;;IAXA,wBAAA,GAAH;QAgBI,IAAI,CAfC,oBAAC,CAAoB,iBAAC,EAAkB;YAgB3C,WAAW,EAfE,IAAA,CAAK,WAAC;YAgBnB,KAAK,oBAfE;gBAgBL,EAAE,EAfE,IAAA,CAAK,oBAAC,CAAoB,EAAC;gBAgB/B,GAAG,EAfE,IAAA,CAAK,oBAAC,CAAoB,GAAC;gBAgBhC,iBAAiB,EAfE,IAAA,CAAK,oBAAC,CAAoB,iBAAC;gBAgB9C,KAAK,EAfE,IAAA,CAAK,UAAC,CAAU,SAAC,CAAS,IAAC,CAAI,WAAC,CAAW;aAC/C,CAAA;SAgBN,CAfC,CAAC;KAgBJ;;;;;IAbA,oBAAA,CAAA,KAAA,EAAH;QAmBI,IAAI,CAlBC,oBAAC,CAAoB,aAAC,EAAc;YAmBvC,WAAW,EAlBE,IAAA,CAAK,WAAC;YAmBnB,UAAU,EAlBE,IAAA,CAAK,UAAC;YAmBlB,KAAK;SACN,CAlBC,CAAC;KAmBJ;;;;;IAhBA,mBAAA,CAAA,KAAA,EAAH;QAsBI,IAAI,CArBC,oBAAC,CAAoB,YAAC,EAAa;YAsBtC,WAAW,EArBE,IAAA,CAAK,WAAC;YAsBnB,UAAU,EArBE,IAAA,CAAK,UAAC;YAsBlB,KAAK;SACN,CArBC,CAAC;KAsBJ;;;;;;IAnBA,oBAAA,CAAA,IAAA,EAAA,OAAA,EAAH;QA0BI,IAAI,CAzBC,yBAAC,GAA2B,IAAA,CAAK;QA0BtC,IAzBI;YA0BF,IAAI,CAzBC,KAAC,CAAK,QAAC,CAAQ,EAAE,IAAA,EAAM,OAAA,EAAQ,CAAE,CAAC;SA0BxC;gBAzBS;YA0BR,IAAI,CAzBC,yBAAC,GAA2B,KAAA,CAAM;YA0BvC,IAAI,CAzBC,6BAAC,GAA+B,KAAA,CAAM;SA0B5C;KACF;;AAxBI,2BAAP,CAAA,UAAO,GAAoC;IA0B3C,EAzBE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBA0BtB,SAAS,EAzBE;oBA0BT,EAzBE,OAAA,EAAS,qBAAA,EAAuB,QAAA,EAAU,4BAAA,EAA6B;iBA0B1E;aACF,EAzBC,EAAG;CA0BJ,CAzBC;;;;AAED,2BAAD,CAAA,cAAC,GAAA,MAAA;IA4BD,EAAC,IAAI,EAAE,KAAK,GAAG;IACf,EAAC,IAAI,EAAE,MAAM,GAAG;IAChB,EAAC,IAAI,EAAE,qBAAqB,GAAG;CAC9B,CAAC,AAGF,AAwBC;;ADnUD;;GAEG,AAEH,AAAkU;;"}