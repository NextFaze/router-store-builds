{"version":3,"sources":["../../../modules/router-store/src/router_store_module.ts","../../../modules/router-store/src/serializer.ts"],"names":["routerReducer","state","action","type","ROUTER_NAVIGATION","ROUTER_ERROR","ROUTER_CANCEL","payload","routerState","navigationId","event","id","RouterStateSerializer","prototype","serialize","DefaultRouterStateSerializer","StoreRouterConnectingModule","store","router","serializer","this","dispatchTriggeredByRouter","navigationTriggeredByDispatch","setUpBeforePreactivationHook","setUpStoreStateListener","setUpStateRollbackEvents","_this","hooks","beforePreactivation","shouldDispatchRouterNavigation","dispatchRouterNavigation","of","subscribe","s","storeState","navigateIfNeeded","url","navigateByUrl","events","e","RoutesRecognized","lastRoutesRecognized","NavigationCancel","dispatchRouterCancel","NavigationError","dispatchRouterError","dispatchRouterAction","urlAfterRedirects","dispatch","decorators","NgModule","args","providers","provide","useClass","ctorParameters","Store","Router"],"mappings":"mdA8FA,SAAAA,GACEC,EACAC,GAEA,OAAOA,EAFQC,MAGb,IAFKC,GAGL,IAFKC,GAGL,IAFKC,GAGH,OACEL,MAFOC,EAAOK,QAAQC,YAGtBC,aAFcP,EAAOK,QAAQG,MAAMC,GAIvC,SACE,MAFOV,ICpGb,GAAAW,GAAA,WAAA,QAAAA,MAOA,MADAA,GAAAC,UAAAC,UAAA,SAPYN,KAQZI,KACAG,EAAA,WAAA,QAAAA,MASA,MAHAA,GAAAF,UAAAC,UAAA,SAVGN,GAWC,MAVOA,IAYXO,KDLCX,EAAA,oBAqBAE,EAAA,gBAsBAD,EAAA,cA4FDW,EAAA,WAWA,QAAAA,GAFYC,EACAC,EACAC,GAFAC,KAAZH,MAAYA,EACAG,KAAZF,OAAYA,EACAE,KAAZD,WAAYA,EANFC,KAAVC,2BAA+C,EACrCD,KAAVE,+BAAmD,EAU/CF,KAAKG,+BACLH,KAAKI,0BACLJ,KAAKK,iCAANT,GAAHH,UAAAU,6BAAG,WAAA,GAAHG,GAAAN,IACUA,MAAM,OAAOO,MAAMC,oBAAsB,SAM7CpB,GAKA,MAHAkB,GALKlB,YAAckB,EAAKP,WAAWL,UAAUN,GAMzCkB,EALKG,kCAMPH,EALKI,2BACAC,EAAAA,IAAG,KAIbf,EAAHH,UAAAW,wBAAG,WAAA,GAAHE,GAAAN,IAQIA,MAPKH,MAAMe,UAAU,SAAAC,GAQnBP,EAPKQ,WAAaD,EAQlBP,EAPKS,sBAIRnB,EAAHH,UAAAgB,+BAAG,WAUC,OATKT,KAAKc,WAAY,gBACfd,KAAME,+BAGdN,EAAHH,UAAAsB,iBAAG,WAaIf,KAXKc,WAAY,eAYjBd,KAXKc,WAAY,cAAgBjC,QAehCmB,KAXKC,2BAaLD,KAXKF,OAAOkB,MAAQhB,KAAKc,WAAY,cAAgBjC,MAAMmC,MAY7DhB,KAXKE,+BAAgC,EAYrCF,KAXKF,OAAOmB,cAAcjB,KAAKc,WAAY,cAAgBjC,MAAMmC,QAIpEpB,EAAHH,UAAAY,yBAAG,WAAA,GAAHC,GAAAN,IAcIA,MAbKF,OAAOoB,OAAON,UAAU,SAAAO,GAcvBA,YAbaC,GAAAA,iBAcfd,EAbKe,qBAAuBF,EACvBA,YAAiBG,GAAAA,iBActBhB,EAbKiB,qBAAqBJ,GACrBA,YAAiBK,GAAAA,iBActBlB,EAbKmB,oBAAoBN,MAK9BvB,EAAHH,UAAAiB,yBAAG,WAgBCV,KAfK0B,qBAAqB1C,GAgBxBI,YAfaY,KAAKZ,YAgBlBE,MAfO,GAAI8B,GAAAA,iBAgBTpB,KAfKqB,qBAAqB9B,GAgB1BS,KAfKqB,qBAAqBL,IAgB1BhB,KAfKqB,qBAAqBM,kBAgB1B3B,KAfKZ,gBAKVQ,EAAHH,UAAA8B,qBAAG,SAAAjC,GAmBCU,KAlBK0B,qBAAqBxC,GAmBxBE,YAlBaY,KAAKZ,YAmBlB0B,WAlBYd,KAAKc,WAmBjBxB,MAANA,KAdGM,EAAHH,UAAAgC,oBAAG,SAAAnC,GAsBCU,KArBK0B,qBAAqBzC,GAsBxBG,YArBaY,KAAKZ,YAsBlB0B,WArBYd,KAAKc,WAsBjBxB,MAANA,KAjBGM,EAAHH,UAAAiC,qBAAG,SAAA3C,EAAAI,GA0BCa,KAzBKC,2BAA4B,CA0BjC,KACED,KAzBKH,MAAM+B,UAAW7C,KAyB5BA,EAzBkCI,QAyBlCA,YAEMa,KAzBKC,2BAA4B,EA0BjCD,KAzBKE,+BAAgC,QAGpCN,GAAPiC,aACE9C,KAAM+C,EAAAA,SAAUC,OA0BhBC,YAxBIC,QAASzC,EAAuB0C,SAAUvC,QAK/CC,EAADuC,eAAC,WAAA,QA4BApD,KAAMqD,EAAAA,QACNrD,KAAMsD,EAAAA,SACNtD,KAAMS","file":"./dist/router-store/bundles/router-store.umd.min.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationError,\n  Router,\n  RouterStateSnapshot,\n  RoutesRecognized,\n} from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs/observable/of';\nimport {\n  DefaultRouterStateSerializer,\n  RouterStateSerializer,\n} from './serializer';\n/**\n * An action dispatched when the router navigates.\n */\nexport const ROUTER_NAVIGATION = 'ROUTER_NAVIGATION';\n\n/**\n * Payload of ROUTER_NAVIGATION.\n */\nexport type RouterNavigationPayload<T> = {\n  routerState: T;\n  event: RoutesRecognized;\n};\n\n/**\n * An action dispatched when the router navigates.\n */\nexport type RouterNavigationAction<T> = {\n  type: typeof ROUTER_NAVIGATION;\n  payload: RouterNavigationPayload<T>;\n};\n/**\n * An action dispatched when the router cancels navigation.\n */\nexport const ROUTER_CANCEL = 'ROUTER_CANCEL';\n\n/**\n * Payload of ROUTER_CANCEL.\n */\nexport type RouterCancelPayload<T> = {\n  routerState: RouterStateSnapshot;\n  storeState: T;\n  event: NavigationCancel;\n};\n\n/**\n * An action dispatched when the router cancel navigation.\n */\nexport type RouterCancelAction<T> = {\n  type: typeof ROUTER_CANCEL;\n  payload: RouterCancelPayload<T>;\n};\n/**\n * An action dispatched when the router errors.\n */\nexport const ROUTER_ERROR = 'ROUTE_ERROR';\n\n/**\n * Payload of ROUTER_ERROR.\n */\nexport type RouterErrorPayload<T> = {\n  routerState: RouterStateSnapshot;\n  storeState: T;\n  event: NavigationError;\n};\n\n/**\n * An action dispatched when the router errors.\n */\nexport type RouterErrorAction<T> = {\n  type: typeof ROUTER_ERROR;\n  payload: RouterErrorPayload<T>;\n};\n\n/**\n * An union type of router actions.\n */\nexport type RouterAction<T> =\n  | RouterNavigationAction<T>\n  | RouterCancelAction<T>\n  | RouterErrorAction<T>;\n\nexport type RouterReducerState = {\n  state: RouterStateSnapshot;\n  navigationId: number;\n};\n/**\n * @param {?} state\n * @param {?} action\n * @return {?}\n */\nexport function routerReducer(\n  state: RouterReducerState,\n  action: RouterAction<any>\n): RouterReducerState {\n  switch (action.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    default:\n      return state;\n  }\n}\n/**\n * Connects RouterModule with StoreModule.\n * \n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n * \n * ```\n * export type RouterNavigationPayload = {\n *   routerState: RouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n * \n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n * \n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n * \n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n * \n * Usage:\n * \n * ```typescript\n * \\@NgModule({ \n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nexport class StoreRouterConnectingModule {\nprivate routerState: RouterStateSnapshot;\nprivate storeState: any;\nprivate lastRoutesRecognized: RoutesRecognized;\nprivate dispatchTriggeredByRouter: boolean = false;\nprivate navigationTriggeredByDispatch: boolean = false;\n/**\n * @param {?} store\n * @param {?} router\n * @param {?} serializer\n */\nconstructor(\nprivate store: Store<any>,\nprivate router: Router,\nprivate serializer: RouterStateSerializer<RouterStateSnapshot>\n  ) {\n    this.setUpBeforePreactivationHook();\n    this.setUpStoreStateListener();\n    this.setUpStateRollbackEvents();\n  }\n/**\n * @return {?}\n */\nprivate setUpBeforePreactivationHook(): void {\n    ( /** @type {?} */((<any>this.router))).hooks.beforePreactivation = (\n      routerState: RouterStateSnapshot\n    ) => {\n      this.routerState = this.serializer.serialize(routerState);\n      if (this.shouldDispatchRouterNavigation())\n        this.dispatchRouterNavigation();\n      return of(true);\n    };\n  }\n/**\n * @return {?}\n */\nprivate setUpStoreStateListener(): void {\n    this.store.subscribe(s => {\n      this.storeState = s;\n      this.navigateIfNeeded();\n    });\n  }\n/**\n * @return {?}\n */\nprivate shouldDispatchRouterNavigation(): boolean {\n    if (!this.storeState['routerReducer']) return true;\n    return !this.navigationTriggeredByDispatch;\n  }\n/**\n * @return {?}\n */\nprivate navigateIfNeeded(): void {\n    if (\n      !this.storeState['routerReducer'] ||\n      !this.storeState['routerReducer'].state\n    ) {\n      return;\n    }\n    if (this.dispatchTriggeredByRouter) return;\n\n    if (this.router.url !== this.storeState['routerReducer'].state.url) {\n      this.navigationTriggeredByDispatch = true;\n      this.router.navigateByUrl(this.storeState['routerReducer'].state.url);\n    }\n  }\n/**\n * @return {?}\n */\nprivate setUpStateRollbackEvents(): void {\n    this.router.events.subscribe(e => {\n      if (e instanceof RoutesRecognized) {\n        this.lastRoutesRecognized = e;\n      } else if (e instanceof NavigationCancel) {\n        this.dispatchRouterCancel(e);\n      } else if (e instanceof NavigationError) {\n        this.dispatchRouterError(e);\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate dispatchRouterNavigation(): void {\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: this.routerState,\n      event: new RoutesRecognized(\n        this.lastRoutesRecognized.id,\n        this.lastRoutesRecognized.url,\n        this.lastRoutesRecognized.urlAfterRedirects,\n        this.routerState\n      ),\n    });\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nprivate dispatchRouterCancel(event: NavigationCancel): void {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      routerState: this.routerState,\n      storeState: this.storeState,\n      event,\n    });\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nprivate dispatchRouterError(event: NavigationError): void {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      routerState: this.routerState,\n      storeState: this.storeState,\n      event,\n    });\n  }\n/**\n * @param {?} type\n * @param {?} payload\n * @return {?}\n */\nprivate dispatchRouterAction(type: string, payload: any): void {\n    this.dispatchTriggeredByRouter = true;\n    try {\n      this.store.dispatch({ type, payload });\n    } finally {\n      this.dispatchTriggeredByRouter = false;\n      this.navigationTriggeredByDispatch = false;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    { provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer },\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Store, },\n{type: Router, },\n{type: RouterStateSerializer, },\n];\n}\n\nfunction StoreRouterConnectingModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreRouterConnectingModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreRouterConnectingModule.ctorParameters;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.routerState;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.storeState;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.lastRoutesRecognized;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.dispatchTriggeredByRouter;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.navigationTriggeredByDispatch;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.store;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.router;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.serializer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { InjectionToken } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\n/**\n * @abstract\n */\nexport abstract class RouterStateSerializer<T> {\n/**\n * @abstract\n * @param {?} routerState\n * @return {?}\n */\nserialize(routerState: RouterStateSnapshot) {}\n}\nexport class DefaultRouterStateSerializer\n  implements RouterStateSerializer<RouterStateSnapshot> {\n/**\n * @param {?} routerState\n * @return {?}\n */\nserialize(routerState: RouterStateSnapshot) {\n    return routerState;\n  }\n}\n"]}