{"version":3,"sources":["../../../modules/router-store/src/router_store_module.ts"],"names":["routerReducer","state","action","type","ROUTER_NAVIGATION","ROUTER_ERROR","ROUTER_CANCEL","payload","routerState","navigationId","event","id","StoreRouterConnectingModule","store","router","this","dispatchTriggeredByRouter","navigationTriggeredByDispatch","setUpBeforePreactivationHook","setUpStoreStateListener","setUpStateRollbackEvents","prototype","_this","hooks","beforePreactivation","shouldDispatchRouterNavigation","dispatchRouterNavigation","of","subscribe","s","storeState","navigateIfNeeded","url","navigateByUrl","events","e","RoutesRecognized","lastRoutesRecognized","NavigationCancel","dispatchRouterCancel","NavigationError","dispatchRouterError","dispatchRouterAction","dispatch","decorators","NgModule","args","ctorParameters","Store","Router"],"mappings":"mdA0FA,SAAAA,GACEC,EACAC,GAEA,OAAOA,EADQC,MAEb,IADKC,GAEL,IADKC,GAEL,IADKC,GAEH,OACEL,MADOC,EAAOK,QAAQC,YAEtBC,aADcP,EAAOK,QAAQG,MAAMC,GAGvC,SACA,MADSV,IAzFb,GACCG,GAAA,oBAqBAE,EAAA,gBAsBAD,EAAA,cA2FDO,EAAA,WAUA,QAAAA,GADsBC,EAA2BC,GAA3BC,KAAtBF,MAAsBA,EAA2BE,KAAjDD,OAAiDA,EAPvCC,KAAVP,YAAoD,KAI1CO,KAAVC,2BAA+C,EACrCD,KAAVE,+BAAmD,EAK/CF,KAAKG,+BACLH,KAAKI,0BACLJ,KAAKK,iCACNR,GAAHS,UAAAH,6BAAG,WAAA,GAAHI,GAAAP,IACUA,MAAM,OAAOQ,MAAMC,oBAAsB,SAK7ChB,GAKA,MAHAc,GAJKd,YAAcA,EAKfc,EAJKG,kCAKPH,EAJKI,2BACAC,EAAAA,IAAG,KAIbf,EAAHS,UAAAF,wBAAG,WAAA,GAAHG,GAAAP,IAOIA,MANKF,MAAMe,UAAU,SAAAC,GAOnBP,EANKQ,WAAaD,EAOlBP,EANKS,sBAIRnB,EAAHS,UAAAI,+BAAG,WASC,OARKV,KAAKe,WAAY,gBACff,KAAME,+BAGdL,EAAHS,UAAAU,iBAAG,WAYIhB,KAVKe,WAAY,eAWjBf,KAVKe,WAAY,cAAgB7B,QAchCc,KAVKC,2BAYLD,KAVKD,OAAOkB,MAAQjB,KAAKe,WAAY,cAAgB7B,MAAM+B,MAW7DjB,KAVKE,+BAAgC,EAWrCF,KAVKD,OAAOmB,cAAclB,KAAKe,WAAY,cAAgB7B,MAAM+B,QAIpEpB,EAAHS,UAAAD,yBAAG,WAAA,GAAHE,GAAAP,IAaIA,MAZKD,OAAOoB,OAAON,UAAU,SAAAO,GAavBA,YAZaC,GAAAA,iBAafd,EAZKe,qBAAuBF,EACvBA,YAAiBG,GAAAA,iBAatBhB,EAZKiB,qBAAqBJ,GACrBA,YAAiBK,GAAAA,iBAatBlB,EAZKmB,oBAAoBN,MAK9BvB,EAAHS,UAAAK,yBAAG,WAeCX,KAdK2B,qBAAqBtC,GAexBI,YAdaO,KAAKP,YAelBE,MAdOK,KAAKsB,wBAIfzB,EAAHS,UAAAkB,qBAAG,SAAA7B,GAkBCK,KAjBK2B,qBAAqBpC,GAkBxBE,YAjBaO,KAAKP,YAkBlBsB,WAjBYf,KAAKe,WAkBjBpB,MAANA,KAbGE,EAAHS,UAAAoB,oBAAG,SAAA/B,GAqBCK,KApBK2B,qBAAqBrC,GAqBxBG,YApBaO,KAAKP,YAqBlBsB,WApBYf,KAAKe,WAqBjBpB,MAANA,KAhBGE,EAAHS,UAAAqB,qBAAG,SAAAvC,EAAAI,GAyBCQ,KAxBKC,2BAA4B,CAyBjC,KACED,KAxBKF,MAAM8B,UAAWxC,KAwB5BA,EAxBkCI,QAwBlCA,YAEMQ,KAxBKC,2BAA4B,EAyBjCD,KAxBKE,+BAAgC,QAGpCL,GAAPgC,aACEzC,KAAM0C,EAAAA,SAAUC,YAGjBlC,EAADmC,eAAC,WAAA,QA2BA5C,KAAM6C,EAAAA,QACN7C,KAAM8C,EAAAA","file":"./dist/router-store/bundles/router-store.umd.min.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationError,\n  Router,\n  RouterStateSnapshot,\n  RoutesRecognized,\n} from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs/observable/of';\n/**\n * An action dispatched when the router navigates.\n */\nexport const ROUTER_NAVIGATION = 'ROUTER_NAVIGATION';\n\n/**\n * Payload of ROUTER_NAVIGATION.\n */\nexport type RouterNavigationPayload = {\n  routerState: RouterStateSnapshot;\n  event: RoutesRecognized;\n};\n\n/**\n * An action dispatched when the router navigates.\n */\nexport type RouterNavigationAction = {\n  type: typeof ROUTER_NAVIGATION;\n  payload: RouterNavigationPayload;\n};\n/**\n * An action dispatched when the router cancels navigation.\n */\nexport const ROUTER_CANCEL = 'ROUTER_CANCEL';\n\n/**\n * Payload of ROUTER_CANCEL.\n */\nexport type RouterCancelPayload<T> = {\n  routerState: RouterStateSnapshot;\n  storeState: T;\n  event: NavigationCancel;\n};\n\n/**\n * An action dispatched when the router cancel navigation.\n */\nexport type RouterCancelAction<T> = {\n  type: typeof ROUTER_CANCEL;\n  payload: RouterCancelPayload<T>;\n};\n/**\n * An action dispatched when the router errors.\n */\nexport const ROUTER_ERROR = 'ROUTE_ERROR';\n\n/**\n * Payload of ROUTER_ERROR.\n */\nexport type RouterErrorPayload<T> = {\n  routerState: RouterStateSnapshot;\n  storeState: T;\n  event: NavigationError;\n};\n\n/**\n * An action dispatched when the router errors.\n */\nexport type RouterErrorAction<T> = {\n  type: typeof ROUTER_ERROR;\n  payload: RouterErrorPayload<T>;\n};\n\n/**\n * An union type of router actions.\n */\nexport type RouterAction<T> =\n  | RouterNavigationAction\n  | RouterCancelAction<T>\n  | RouterErrorAction<T>;\n\nexport type RouterReducerState = {\n  state: RouterStateSnapshot;\n  navigationId: number;\n};\n/**\n * @param {?} state\n * @param {?} action\n * @return {?}\n */\nexport function routerReducer(\n  state: RouterReducerState,\n  action: RouterAction<any>\n): RouterReducerState {\n  switch (action.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    default:\n      return state;\n  }\n}\n/**\n * Connects RouterModule with StoreModule.\n * \n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n * \n * ```\n * export type RouterNavigationPayload = {\n *   routerState: RouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n * \n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n * \n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n * \n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n * \n * Usage:\n * \n * ```typescript\n * \\@NgModule({ \n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.provideStore(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nexport class StoreRouterConnectingModule {\nprivate routerState: RouterStateSnapshot | null = null;\nprivate storeState: any;\nprivate lastRoutesRecognized: RoutesRecognized;\nprivate dispatchTriggeredByRouter: boolean = false;\nprivate navigationTriggeredByDispatch: boolean = false;\n/**\n * @param {?} store\n * @param {?} router\n */\nconstructor(private store: Store<any>,\nprivate router: Router) {\n    this.setUpBeforePreactivationHook();\n    this.setUpStoreStateListener();\n    this.setUpStateRollbackEvents();\n  }\n/**\n * @return {?}\n */\nprivate setUpBeforePreactivationHook(): void {\n    ( /** @type {?} */((<any>this.router))).hooks.beforePreactivation = (\n      routerState: RouterStateSnapshot\n    ) => {\n      this.routerState = routerState;\n      if (this.shouldDispatchRouterNavigation())\n        this.dispatchRouterNavigation();\n      return of(true);\n    };\n  }\n/**\n * @return {?}\n */\nprivate setUpStoreStateListener(): void {\n    this.store.subscribe(s => {\n      this.storeState = s;\n      this.navigateIfNeeded();\n    });\n  }\n/**\n * @return {?}\n */\nprivate shouldDispatchRouterNavigation(): boolean {\n    if (!this.storeState['routerReducer']) return true;\n    return !this.navigationTriggeredByDispatch;\n  }\n/**\n * @return {?}\n */\nprivate navigateIfNeeded(): void {\n    if (\n      !this.storeState['routerReducer'] ||\n      !this.storeState['routerReducer'].state\n    ) {\n      return;\n    }\n    if (this.dispatchTriggeredByRouter) return;\n\n    if (this.router.url !== this.storeState['routerReducer'].state.url) {\n      this.navigationTriggeredByDispatch = true;\n      this.router.navigateByUrl(this.storeState['routerReducer'].state.url);\n    }\n  }\n/**\n * @return {?}\n */\nprivate setUpStateRollbackEvents(): void {\n    this.router.events.subscribe(e => {\n      if (e instanceof RoutesRecognized) {\n        this.lastRoutesRecognized = e;\n      } else if (e instanceof NavigationCancel) {\n        this.dispatchRouterCancel(e);\n      } else if (e instanceof NavigationError) {\n        this.dispatchRouterError(e);\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate dispatchRouterNavigation(): void {\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: this.routerState,\n      event: this.lastRoutesRecognized,\n    });\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nprivate dispatchRouterCancel(event: NavigationCancel): void {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      routerState: this.routerState,\n      storeState: this.storeState,\n      event,\n    });\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nprivate dispatchRouterError(event: NavigationError): void {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      routerState: this.routerState,\n      storeState: this.storeState,\n      event,\n    });\n  }\n/**\n * @param {?} type\n * @param {?} payload\n * @return {?}\n */\nprivate dispatchRouterAction(type: string, payload: any): void {\n    this.dispatchTriggeredByRouter = true;\n    try {\n      this.store.dispatch({ type, payload });\n    } finally {\n      this.dispatchTriggeredByRouter = false;\n      this.navigationTriggeredByDispatch = false;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Store, },\n{type: Router, },\n];\n}\n\nfunction StoreRouterConnectingModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreRouterConnectingModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreRouterConnectingModule.ctorParameters;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.routerState;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.storeState;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.lastRoutesRecognized;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.dispatchTriggeredByRouter;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.navigationTriggeredByDispatch;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.store;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}